{
  "info": {
    "_postman_id": "c47f22c3-a302-45f9-b2d0-7235105b9e34",
    "name": "Test Explore With Me - Main service feature",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "14882502"
  },
  "item": [
    {
      "name": "Feature",
      "item": [
        {
          "name": "Поиск событий по локации",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let eventArr, user, category, eventResponseArr = [];\r",
                  "    try {\r",
                  "        user = await api.addUser(rnd.getUser());\r",
                  "        category = await api.addCategory(rnd.getCategory());\r",
                  "        eventArr = Array.from({length:11}, () => rnd.getEvent(category.id));\r",
                  "        for (let i = 0; i < 5; i++){\r",
                  "            event = await api.addEvent(user.id, eventArr[i]);\r",
                  "            eventResponseArr.push(event);\r",
                  "        }\r",
                  "        rndEvent = eventResponseArr[_.random(0, 5)];\r",
                  "\r",
                  "        pm.request.url.addQueryParams(\"lat=\" + (rndEvent.location.lat));\r",
                  "        pm.request.url.addQueryParams(\"lon=\" + (rndEvent.location.lon));\r",
                  "        pm.request.url.addQueryParams(\"radius=\" + 10);\r",
                  "\r",
                  "        pm.collectionVariables.set('responseArr', eventResponseArr)\r",
                  "        pm.collectionVariables.set(\"uid\", user.id)\r",
                  "        await pm.sendRequest({\r",
                  "            url : \"http://localhost:8080/users/\" + user.id + \"/events?from=0\",\r",
                  "            method : \"GET\",\r",
                  "            header: { \"Content-Type\": \"application/json\" }\r",
                  "        }, (error, response) => {pm.collectionVariables.set('source', response.json())});\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "const source = pm.collectionVariables.get('responseArr');\r",
                  "newSourceArr = Array.from(source, (x) => x.id);\r",
                  "const responseWithFrom = pm.collectionVariables.get('source');\r",
                  "\r",
                  "pm.test(\"Все найденные события должны быть в списке добавленных\", function () {\r",
                  "    source.forEach(function(x){pm.expect(newSourceArr).to.include(x.id)});\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "events"
              ],
              "query": [
                {
                  "key": "lat",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "lon",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "radius",
                  "value": "10",
                  "disabled": true
                },
                {
                  "key": "users",
                  "value": "0",
                  "description": "список id пользователей, чьи события нужно найти",
                  "disabled": true
                },
                {
                  "key": "states",
                  "value": "PUBLISHED",
                  "description": "список состояний в которых находятся искомые события",
                  "disabled": true
                },
                {
                  "key": "categories",
                  "value": "0",
                  "description": "список id категорий в которых будет вестись поиск",
                  "disabled": true
                },
                {
                  "key": "rangeStart",
                  "value": "2022-01-06%2013%3A30%3A38",
                  "description": "дата и время не раньше которых должно произойти событие",
                  "disabled": true
                },
                {
                  "key": "rangeEnd",
                  "value": "2097-09-06%2013%3A30%3A38",
                  "description": "дата и время не позже которых должно произойти событие",
                  "disabled": true
                },
                {
                  "key": "from",
                  "value": "0",
                  "description": "количество событий, которые нужно пропустить для формирования текущего набора",
                  "disabled": true
                },
                {
                  "key": "size",
                  "value": "1000",
                  "description": "количество событий в наборе",
                  "disabled": true
                }
              ]
            },
            "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
          },
          "response": []
        },
        {
          "name": "Создание постоянной локации",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, name, expirationDate, permanent, lat, lon, radius\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('expirationDate');\r",
                  "pm.expect(target).to.have.property('permanent');\r",
                  "pm.expect(target).to.have.property('lat');\r",
                  "pm.expect(target).to.have.property('lon');\r",
                  "pm.expect(target).to.have.property('radius');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.name).equal(source.name, 'Название локации должно соответствовать названию локации в запросе');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"City name\",\r\n    \"permanent\": true,\r\n    \"lat\": 10.0,\r\n    \"lon\": 10.0,\r\n    \"radius\": 50\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ]
            },
            "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
          },
          "response": []
        },
        {
          "name": "Добавление нового события с постоянной локацией",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let event;\r",
                  "    try {\r",
                  "        const user = await api.addUser(rnd.getUser());\r",
                  "        pm.collectionVariables.set(\"uid\", user.id)\r",
                  "        const category = await api.addCategory(rnd.getCategory());\r",
                  "        const location = await api.addLocation(rnd.getLocation(\"Some Location\"));\r",
                  "        event = rnd.getEvent(category.id);\r",
                  "        var loc = {\r",
                  "            id: location.id\r",
                  "        };\r",
                  "        event.location = loc;\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "\r",
                  "    pm.request.body.update({\r",
                  "        mode: 'raw',\r",
                  "        raw: JSON.stringify(event),\r",
                  "        options: { raw: { language: 'json' } }\r",
                  "    });\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(201);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('title');\r",
                  "pm.expect(target).to.have.property('annotation');\r",
                  "pm.expect(target).to.have.property('category');\r",
                  "pm.expect(target).to.have.property('paid');\r",
                  "pm.expect(target).to.have.property('eventDate');\r",
                  "pm.expect(target).to.have.property('initiator');\r",
                  "pm.expect(target).to.have.property('description');\r",
                  "pm.expect(target).to.have.property('participantLimit');\r",
                  "pm.expect(target).to.have.property('state');\r",
                  "pm.expect(target).to.have.property('createdOn');\r",
                  "pm.expect(target).to.have.property('location');\r",
                  "pm.expect(target).to.have.property('requestModeration');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.location.id).equal(source.location.id, 'id локации должно соответствовать id локации в запросе');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{request_body}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/users/:userId/events",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                ":userId",
                "events"
              ],
              "variable": [
                {
                  "key": "userId",
                  "value": "{{uid}}",
                  "description": "(Required) id текущего пользователя"
                }
              ]
            },
            "description": "Обратите внимание: дата и время на которые намечено событие не может быть раньше, чем через два часа от текущего момента"
          },
          "response": []
        },
        {
          "name": "Получение всех локаций",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let eventArr, user, category, eventResponseArr = [];\r",
                  "    try {\r",
                  "        user = await api.addUser(rnd.getUser());\r",
                  "        category = await api.addCategory(rnd.getCategory());\r",
                  "        eventArr = Array.from({length:11}, () => rnd.getEvent(category.id));\r",
                  "        for (let i = 0; i < 5; i++){\r",
                  "            await pm.sendRequest({\r",
                  "                url : \"http://localhost:8080/admin/locations/\",\r",
                  "                method : \"POST\",\r",
                  "                header: { \"Content-Type\": \"application/json\" },\r",
                  "                body: \r",
                  "                `{\r",
                  "                    \"name\": \"City name\",\r",
                  "                    \"permanent\": true,\r",
                  "                    \"lat\": 10.0,\r",
                  "                    \"lon\": 10.0,\r",
                  "                    \"radius\": 50\r",
                  "                }`\r",
                  "            }, (error, response) => {pm.collectionVariables.set('source', response.json())});\r",
                  "        }\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    100 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.be.ok;    \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Добавленные локации должны быть в списке всех локаций\", function () {\r",
                  "    const savedLocation = target.filter(obj => obj.id === 1)[0];\r",
                  "    console.info(savedLocation);\r",
                  "    pm.expect(savedLocation).to.be.not.null;\r",
                  "    pm.expect(savedLocation).to.have.property('id');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/admin/locations?from=0&size=1000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "1000"
                }
              ]
            },
            "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
          },
          "response": []
        },
        {
          "name": "Обновление постоянной локации",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "const main = async () => {\r",
                  "    const api = new API(pm);\r",
                  "    const rnd = new RandomUtils();\r",
                  "\r",
                  "    let eventArr, user, category, eventResponseArr = [];\r",
                  "    try {\r",
                  "        user = await api.addUser(rnd.getUser());\r",
                  "        category = await api.addCategory(rnd.getCategory());\r",
                  "        eventArr = Array.from({length:11}, () => rnd.getEvent(category.id));\r",
                  "        const location = await api.addLocation(rnd.getLocation(\"Some Location\"));\r",
                  "\r",
                  "        pm.collectionVariables.set('locationId', location.id);\r",
                  "        pm.request.url = pm.request.url + location.id;\r",
                  "\r",
                  "    } catch(err) {\r",
                  "        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "const interval = setInterval(() => {}, 1000);\r",
                  "\r",
                  "setTimeout(async () => \r",
                  "    {\r",
                  "        try {\r",
                  "            await main();\r",
                  "        } catch (e) {\r",
                  "            console.error(e);\r",
                  "        } finally {\r",
                  "            clearInterval(interval);\r",
                  "        }\r",
                  "    },  \r",
                  "    1000 \r",
                  ");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
                  "    pm.response.to.have.status(200);  \r",
                  "    pm.response.to.be.withBody;\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "const source = JSON.parse(pm.request.body.raw);\r",
                  "const target = pm.response.json();\r",
                  "\r",
                  "pm.test(\"Событие должно содержать поля: id, name, expirationDate, permanent, lat, lon, radius\", function () {\r",
                  "pm.expect(target).to.have.property('id');\r",
                  "pm.expect(target).to.have.property('name');\r",
                  "pm.expect(target).to.have.property('expirationDate');\r",
                  "pm.expect(target).to.have.property('permanent');\r",
                  "pm.expect(target).to.have.property('lat');\r",
                  "pm.expect(target).to.have.property('lon');\r",
                  "pm.expect(target).to.have.property('radius');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
                  "    pm.expect(target.id).to.not.be.null;\r",
                  "    pm.expect(target.id).equal(pm.collectionVariables.get('locationId'));\r",
                  "    pm.expect(target.name).equal(source.name, 'Updated city name');\r",
                  "    pm.expect(target.lat).equal(source.lat, 12);\r",
                  "    pm.expect(target.lon).equal(source.lon, 13);\r",
                  "    pm.expect(target.radius).equal(source.radius, 55);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Updated city name\",\r\n    \"permanent\": true,\r\n    \"lat\": 12.0,\r\n    \"lon\": 13.0,\r\n    \"radius\": 55\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{baseUrl}}/admin/locations/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "admin",
                "locations",
                ""
              ]
            },
            "description": "Эндпоинт возвращает полную информацию обо всех событиях подходящих под переданные условия"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "API = class {",
          "    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
          "        this.baseUrl = baseUrl;",
          "        this.pm = postman;",
          "        this._verbose = verbose;",
          "    }",
          "",
          "    async addUser(user, verbose=null) {",
          "        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
          "    }",
          "",
          "    async addCategory(category, verbose=null) {",
          "        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
          "    }",
          "",
          "    async addEvent(userId, event, verbose=null) {",
          "        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
          "    }",
          "",
          "    async addLocation(location, verbose=null) {",
          "        return this.post(\"/admin/locations\", location, \"Ошибка при добавлении новой локации: \", verbose);",
          "    }",
          "",
          "    async addCompilation(compilation, verbose=null) {",
          "        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
          "    }",
          "",
          "    async publishParticipationRequest(eventId, userId, verbose=null) {",
          "        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
          "    }",
          "",
          "    async publishEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
          "    }",
          "    ",
          "    async rejectEvent(eventId, verbose=null) {",
          "        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
          "    }",
          "",
          "    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
          "        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
          "    }",
          "",
          "    async findCategory(catId, verbose=null) {",
          "        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
          "    }",
          "",
          "    async findCompilation(compId, verbose=null) {",
          "        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
          "    }",
          "",
          "    async findEvent(eventId, verbose=null) {",
          "        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
          "    }",
          "",
          "    async findUser(userId, verbose=null) {",
          "        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
          "    }",
          "",
          "    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
          "    }",
          "",
          "    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
          "        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
          "    }",
          "    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
          "        return new Promise((resolve, reject) => {",
          "            verbose = verbose == null ? this._verbose : verbose;",
          "            const request = {",
          "                url: this.baseUrl + path,",
          "                method: method,",
          "                body: body == null ? \"\" : JSON.stringify(body),",
          "                header: { \"Content-Type\": \"application/json\" },",
          "            };",
          "            if(verbose) {",
          "                console.log(\"Отправляю запрос: \", request);",
          "            }",
          "",
          "            try {",
          "                this.pm.sendRequest(request, (error, response) => {",
          "                    if(error || (response.code >= 400 && response.code <= 599)) {",
          "                        let err = error ? error : JSON.stringify(response.json());",
          "                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
          "                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
          "                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
          "",
          "                        reject(new Error(errorText + err));",
          "                    }",
          "                    if(verbose) {",
          "                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
          "                    }",
          "                    if (response.stream.length === 0){",
          "                        reject(new Error('Отправлено пустое тело ответа'))",
          "                    }else{",
          "                        resolve(response.json());",
          "                    }",
          "                });",
          "                ",
          "            } catch(err) {",
          "                if(verbose) {",
          "                    console.error(errorText, err);",
          "                }",
          "                return Promise.reject(err);",
          "            }",
          "        });",
          "    }",
          "};",
          "",
          "RandomUtils = class {",
          "    constructor() {}",
          "",
          "    getUser() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomFullName}}'),",
          "            email: pm.variables.replaceIn('{{$randomEmail}}')",
          "        };",
          "    }",
          "",
          "    getCategory() {",
          "        return {",
          "            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()",
          "        };",
          "    }",
          "",
          "    getEvent(categoryId) {",
          "        return {",
          "            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
          "            category: categoryId,",
          "            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
          "            eventDate: this.getFutureDateTime(),",
          "            location: {",
          "                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            },",
          "            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
          "            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
          "        }",
          "    }",
          "",
          "    getLocation(locationName) {",
          "        return {",
          "            name: locationName,",
          "            permanent: true,",
          "            lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
          "            lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
          "            radius: 0",
          "        }",
          "    }",
          "",
          "    getCompilation(...eventIds) {",
          "        return {",
          "            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
          "            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
          "            events: eventIds",
          "        };",
          "    }",
          "",
          "",
          "    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
          "        let moment = require('moment');",
          "",
          "        let m = moment();",
          "        m.add(hourShift, 'hour');",
          "        m.add(minuteShift, 'minute');",
          "        m.add(yearShift, 'year');",
          "",
          "        return m.format('YYYY-MM-DD HH:mm:ss');",
          "    }",
          "",
          "    getWord(length = 1) {",
          "        let result = '';",
          "        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
          "        const charactersLength = characters.length;",
          "        let counter = 0;",
          "        while (counter < length) {",
          "            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
          "            counter += 1;",
          "        }",
          "        return result;",
          "    }",
          "}"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "name",
      "value": ""
    },
    {
      "key": "usersCount",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "request_body",
      "value": ""
    },
    {
      "key": "mail",
      "value": ""
    },
    {
      "key": "response",
      "value": ""
    },
    {
      "key": "uid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catname",
      "value": ""
    },
    {
      "key": "eid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "compid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "toCheck",
      "value": ""
    },
    {
      "key": "newDataToSet",
      "value": ""
    },
    {
      "key": "uid1",
      "value": ""
    },
    {
      "key": "reqid",
      "value": 1,
      "type": "number"
    },
    {
      "key": "catId",
      "value": ""
    },
    {
      "key": "confirmedRequests",
      "value": ""
    },
    {
      "key": "responseArr",
      "value": ""
    },
    {
      "key": "source1",
      "value": ""
    },
    {
      "key": "source2",
      "value": ""
    },
    {
      "key": "fromId",
      "value": "0"
    },
    {
      "key": "source",
      "value": ""
    },
    {
      "key": "locationId",
      "value": "0"
    }
  ]
}